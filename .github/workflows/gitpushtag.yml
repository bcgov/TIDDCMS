# This is a workflow that is manually UI or API or webhook triggered
# Repository secrets TEAMSWEBHOOK https://bcgov.webhook.office.com/webhookb2/... 
# Repository variables VERSION_MAJOR_MINOR 0.1 VERSION_MESSAGE Dev to Test - VERSION_PREFIX v

name: Tag and Alert
# Controls when the action will run. Workflow runs when triggered using the UI or API.
on:
  workflow_dispatch:
  # Allows external webhook triggering
  repository_dispatch:
    types: [webhook]
jobs:
  # This workflow contains a jobs called "GenerateTag" "PushTag" "PushAlert"
  GenerateTag:
    runs-on: ubuntu-latest
    outputs: 
      TAGNAME: ${{steps.nexttag.outputs.gittag}}
      IMAGETAG: ${{steps.nexttag.outputs.imagetag}}
      TAGMESSAGE: ${{steps.nexttag.outputs.tagmsg}}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
          fetch-depth: '0'
    - name: Get current date
      id: date
      run: echo "date=$(date +'%B %e, %Y')" >> $GITHUB_OUTPUT
    - name: Generate Next Git Tag
      id: nexttag
      run: |
        VERSION_PATCH=$(git tag --list "${{vars.VERSION_PREFIX}}${{vars.VERSION_MAJOR_MINOR}}.*" --sort=-version:refname | head -n 1 | grep -oE '[0-9]+$')
        if [ -z "$VERSION_PATCH" ]; then
          VERSION_PATCH=0
        else
          VERSION_PATCH=$((VERSION_PATCH + 1))
        fi
        echo "gittag=${{vars.VERSION_PREFIX}}${{vars.VERSION_MAJOR_MINOR}}.${VERSION_PATCH}" >> $GITHUB_OUTPUT
        echo "imagetag=v${{vars.VERSION_MAJOR_MINOR}}.${VERSION_PATCH}" >> $GITHUB_OUTPUT
        echo "tagmsg=${{vars.VERSION_MESSAGE}} ${{steps.date.outputs.date}}" >> $GITHUB_OUTPUT
  PushTag:
    needs: [GenerateTag]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
          fetch-depth: '0'   
    - name: Push Git Tag
      env:
        TAGNAME: ${{needs.GenerateTag.outputs.TAGNAME}}
        TAGMESSAGE: ${{needs.GenerateTag.outputs.TAGMESSAGE}}
      run: |
        git config user.name "GitHub Actions"
        git config user.email "github-actions@users.noreply.github.com"
        git tag ${{env.TAGNAME}} -m "${{env.TAGMESSAGE}}"
        git push origin ${{env.TAGNAME}}
  Build:
    needs: [GenerateTag, PushTag]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build application Docker images
      run: |
        rm -f ./docker-compose.override.yml
        docker compose build
      working-directory: ./applications/Unity.GrantManager
    - name: Connect to OpenShift API
      # Change the target project license suffix and OpenShift service account token together 
      run: |
        oc login --token=${{secrets.OPENSHIFT_TOKEN_TEST}} --server=${{vars.OPENSHIFT_CLUSTER}}
        TARGET_PROJECT=$(oc project | grep -oE '[0-9a-z]*-test')
        echo $TARGET_PROJECT
        oc registry login
    - name: Push application images to OpenShift container registry
      run: | 
        docker tag unity-grantmanager-dbmigrator image-registry.apps.silver.devops.gov.bc.ca/c57ee7-test/unity-grantmanager-dbmigrator:${{needs.GenerateTag.outputs.IMAGETAG}}
        docker push image-registry.apps.silver.devops.gov.bc.ca/c57ee7-test/unity-grantmanager-dbmigrator:${{needs.GenerateTag.outputs.IMAGETAG}}
  PushAlert:
    needs: [GenerateTag, PushTag, Build]
    runs-on: ubuntu-latest
    steps:
    - name: Push Alert to Microsoft Teams Channel Webhook
      env:
        TAGNAME: ${{needs.GenerateTag.outputs.TAGNAME}}
        TAGMESSAGE: ${{needs.GenerateTag.outputs.TAGMESSAGE}}
      run: |
        curl -H "Content-Type: application/json" --data-raw "{\"text\":\"${{env.TAGNAME}} ${{env.TAGMESSAGE}}\"}" -X POST -k ${{secrets.TEAMSWEBHOOK}}
